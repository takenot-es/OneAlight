//Need this to run calculations later in the grid.
@use 'sass:math';

//Grid
.grid,
.grid--fluid,
.grid--sm,
.grid--md,
.grid--lg,
.grid--xl {
  @include create--grid;
}

//Grid Containers
@each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @each $size, $grid-size in $grid-max-width {
        @if $breakpoint == $size {
            @media screen and (min-width: $breakpoint-size) {
                .grid--#{$size}, .grid {
                    max-width: $grid-size;
                }
            }
        }
    }
}


//Grid Rows
.grid--row {
    @include create-grid-row;
}


//Grid Cells Base
@for $i from 1 through $grid--columns {
    .cell--#{$i} {
        flex: 0 0 math.percentage(math.div($i, $grid--columns));
        max-width: math.percentage(math.div($i, $grid--columns));
        @include create-grid-cell;
    }
}


//Grid Cells all size to 100% if no other size specified
@each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @each $size, $grid-size in $grid-max-width {
        @if $breakpoint == $size {
            @for $i from 1 through $grid--columns {
                .cell--#{$size}-#{$i} {
                    flex: 0 0 100%;
                    max-width: 100%;
                    @include create-grid-cell;
                }
            }
        }
    }
}


//Grid Cells responsive grid
@each $breakpoint, $breakpoint-size in $grid-breakpoints {
    @each $size, $grid-size in $grid-max-width {
        @if $breakpoint == $size {
            @media screen and (min-width: $breakpoint-size) {
                @for $i from 1 through $grid--columns {
                    .cell--#{$size}-#{$i} {
                        flex: 0 0 math.percentage(math.div($i, $grid--columns));
                        max-width: math.percentage(math.div($i, $grid--columns));
                    }
                }
            }
        }
    }
}


